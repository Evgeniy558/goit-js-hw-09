{"mappings":"gfAAA,IAAAA,EAAAC,EAAA,SAEaC,SAASC,cAAc,QAE/BC,iBAAiB,UAAU,SAAAC,G,kBAI5B,IAAIC,EAAWC,EAAI,EACfC,EAAYC,OAAOC,EAAMC,OAASJ,EAAIE,OAAOG,EAAKD,OACtDE,YAAW,YAMf,SAAuBP,EAAUI,GAC/B,IAAII,SAAQ,SAACC,EAASC,GACEC,KAAKC,SAAW,GAEpCH,EAAQ,qBAAoCI,OAAfb,EAAS,QAAYa,OAANT,EAAM,OAElDM,EAAO,oBAAmCG,OAAfb,EAAS,QAAYa,OAANT,EAAM,M,IAGjDU,MAAK,SAAAT,GACJX,EAAAqB,OAAOC,QAAQX,E,IAEhBY,OAAM,SAAAZ,GACLX,EAAAqB,OAAOG,QAAQb,E,IAlBfc,CAAcnB,EAAUE,E,GACvBA,E,EAP2BkB,EAAArB,EAAGsB,cAA3BjB,EAAwBgB,EAAxBhB,MAAOE,EAAiBc,EAAjBd,KAAMgB,EAAWF,EAAXE,OACrBvB,EAAGwB,iBACH,IAAK,IAAIC,EAAI,EAAGA,EAAIrB,OAAOmB,EAAOjB,OAAQmB,IAAGC,EAAAD,E","sources":["src/js/03-promises.js"],"sourcesContent":["import { Notify } from 'notiflix/build/notiflix-notify-aio';\n\nconst form = document.querySelector('form');\n\nform.addEventListener('submit', ev => {\n  const { delay, step, amount } = ev.currentTarget;\n  ev.preventDefault();\n  for (let n = 0; n < Number(amount.value); n++) {\n    let position = n + 1;\n    let delayLoop = Number(delay.value) + n * Number(step.value);\n    setTimeout(() => {\n      createPromise(position, delayLoop);\n    }, delayLoop);\n  }\n});\n\nfunction createPromise(position, delay) {\n  new Promise((resolve, reject) => {\n    const shouldResolve = Math.random() > 0.3;\n    if (shouldResolve) {\n      resolve(`Fulfilled promise ${position} in ${delay}ms`);\n    } else {\n      reject(`Rejected promise ${position} in ${delay}ms`);\n    }\n  })\n    .then(value => {\n      Notify.success(value);\n    })\n    .catch(value => {\n      Notify.failure(value);\n    });\n}\n"],"names":["$h6c0i","parcelRequire","document","querySelector","addEventListener","ev","position","n","delayLoop","Number","delay","value","step","setTimeout","Promise","resolve","reject","Math","random","concat","then","Notify","success","catch","failure","$ce04d3a99e08e73b$var$createPromise","_currentTarget","currentTarget","amount","preventDefault","n1","_loop"],"version":3,"file":"03-promises.1e53604f.js.map"}