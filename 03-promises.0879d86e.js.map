{"mappings":"oeAAA,IAAAA,EAAAC,EAAA,SAgBA,SAASC,EAAcC,EAAUC,GAC/B,IAAIC,SAAQ,CAACC,EAASC,KACEC,KAAKC,SAAW,GAEpCH,EAAQ,qBAAqBH,QAAeC,OAE5CG,EAAO,oBAAoBJ,QAAeC,MAAU,IAGrDM,MAAKC,IACJX,EAAAY,OAAOC,QAAQF,EAAM,IAEtBG,OAAMH,IACLX,EAAAY,OAAOG,QAAQJ,EAAM,G,CA3BdK,SAASC,cAAc,QAE/BC,iBAAiB,UAAUC,IAC9B,MAAMf,MAAEA,EAAKgB,KAAEA,EAAIC,OAAEA,GAAWF,EAAGG,cACnCH,EAAGI,iBACH,IAAK,IAAIC,EAAI,EAAGA,EAAIC,OAAOJ,EAAOV,OAAQa,IAAK,CAC7C,IAAIrB,EAAWqB,EAAI,EACfE,EAAYD,OAAOrB,EAAMO,OAASa,EAAIC,OAAOL,EAAKT,OACtDgB,YAAW,KACTzB,EAAcC,EAAUuB,EAAU,GACjCA,E","sources":["src/js/03-promises.js"],"sourcesContent":["import { Notify } from 'notiflix/build/notiflix-notify-aio';\n\nconst form = document.querySelector('form');\n\nform.addEventListener('submit', ev => {\n  const { delay, step, amount } = ev.currentTarget;\n  ev.preventDefault();\n  for (let n = 0; n < Number(amount.value); n++) {\n    let position = n + 1;\n    let delayLoop = Number(delay.value) + n * Number(step.value);\n    setTimeout(() => {\n      createPromise(position, delayLoop);\n    }, delayLoop);\n  }\n});\n\nfunction createPromise(position, delay) {\n  new Promise((resolve, reject) => {\n    const shouldResolve = Math.random() > 0.3;\n    if (shouldResolve) {\n      resolve(`Fulfilled promise ${position} in ${delay}ms`);\n    } else {\n      reject(`Rejected promise ${position} in ${delay}ms`);\n    }\n  })\n    .then(value => {\n      Notify.success(value);\n    })\n    .catch(value => {\n      Notify.failure(value);\n    });\n}\n"],"names":["$iQIUW","parcelRequire","$47d4ff9957288465$var$createPromise","position","delay","Promise","resolve","reject","Math","random","then","value","Notify","success","catch","failure","document","querySelector","addEventListener","ev","step","amount","currentTarget","preventDefault","n","Number","delayLoop","setTimeout"],"version":3,"file":"03-promises.0879d86e.js.map"}